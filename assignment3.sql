/* Task 1: Generate invoice reports
Adventure Works Cycles sells directly to retailers, who must be invoiced for their orders.
You have been tasked with writing a query to generate a list of invoices to be sent to
customers.
1.1 Retrieve customer orders
o As an initial step towards generating the invoice report, write a query that returns the
company name from the SalesLT.Customer table, and the sales order ID and total
due from the SalesLT.SalesOrderHeader table. */

SELECT 
cus.CustomerID
, CompanyName
, SalesOrderID
, TotalDue
FROM SalesLT.Customer as cus
JOIN SalesLT.SalesOrderHeader as soh
on cus.CustomerID = soh.CustomerID

/* 1.2 Retrieve customer orders with addresses
o Extend your customer orders query to include the Main Office address for each
customer, including the full street address, city, state or province, postal code, and
country or region
o Tip: Note that each customer can have multiple addressees in
the SalesLT.Address table, so the database developer has created
the SalesLT.CustomerAddress table to enable a many-to-many relationship
between customers and addresses. Your query will need to include both of these
tables, and should filter the results so that only Main Office addresses are included. */


SELECT 
cus.CustomerID
, CompanyName
, SalesOrderID
, TotalDue
, ad.AddressLine1
, ad.City
, ad.StateProvince
, ad.PostalCode
, ad.CountryRegion
FROM SalesLT.Customer as cus
JOIN SalesLT.SalesOrderHeader as soh
on cus.CustomerID = soh.CustomerID
JOIN SalesLT.CustomerAddress as cus_add
on cus.CustomerID = cus_add.CustomerID
JOIN SalesLT.Address as ad
on cus_add.AddressID = ad.AddressID
WHERE cus_add.AddressType = 'Main Office'

/* Task 2: Retrieve customer data
As you continue to work with the Adventure Works customer, product and sales data,
you must create queries for reports that have been requested by the sales team.
  
Retrieve a list of products
â—‹ A sales manager needs a list of the ordered products with more information.
You must write a query that returns a list of the product name (is generated by
the string preceded by the '-' character (example: HL Road Frame)), only
started selling in 2006, Product model name contains 'Road' CategoryName
contains 'Bikes' and ListPrice value with integer part equal to 2443 */

SELECT 
ProductID
, CASE WHEN pro.Name LIKE '%-%' THEN LEFT(pro.Name, CHARINDEX('-',pro.Name)-1)
ELSE pro.Name END as ProductName
, SellStartDate
, model.Name as ModelName
, cat.Name as CatalogyName
, pro.ListPrice
FROM SalesLT.Product as pro 
JOIN SalesLT.ProductCategory as cat 
ON pro.ProductCategoryID = cat.ProductCategoryID
JOIN SalesLT.ProductModel as model 
ON pro.ProductModelID = model.ProductModelID
WHERE 
YEAR(SellStartDate) = 2006
AND model.Name LIKE '%Road%' 
AND cat.Name LIKE '%Bike%'
AND pro.ListPrice LIKE '2443%'


